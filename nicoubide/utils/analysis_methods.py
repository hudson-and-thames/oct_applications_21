"""
Python file to help us with analyzing the results of our KCA strategy -
contains a visualization function and a function to help us calculate PnL
"""

from typing import List

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def plot_entry_and_exit(
    universe: pd.DataFrame, signals: pd.DataFrame, security: str, days: int
) -> None:
    """
    Plots the price time series of a given security for a specified number of
    days and indicates where a trade was entered and exited using markers
    :param universe (pd.DataFrame): Price series of the futures in our investment universe
    :param signals (pd.DataFrame): The signals generated by our KCA strategy for each of our futures
    :param security (str): The specific future we want to look look at
    :param days (int): The number of days to be plotted (starting from the first day in the time series)
    :return None: The function does not return an object but plots our desired graph
    """

    # Isolating the buy signals and sell signals for the security
    buy_signals = signals[:days][security][signals[:days][security] == 1]
    sell_signals = signals[:days][security][signals[:days][security] == -1]

    # Generating lists that contain color markers interpretable by matplotlib
    buy_colors = _generate_buy_sell_colors(buy_signals)
    sell_colors = _generate_buy_sell_colors(sell_signals)

    # Plotting price time series
    plt.figure(figsize=(15, 5))
    plt.plot(universe[:days][security])

    # Plotting entry and exit points
    plt.scatter(
        x=buy_signals.index,
        y=universe[:days][security][buy_signals.index],
        c=buy_colors,
        marker="^",
        s=150,
    )
    plt.scatter(
        x=sell_signals.index,
        y=universe[:days][security][sell_signals.index],
        c=sell_colors,
        marker="v",
        s=150,
    )
    plt.show()


def _generate_buy_sell_colors(buy_or_sell_signal: List[int]):
    """
    Helper function that generates the matplotlib markers
    we need to work with
    :param buy_or_sell_signal (List[int]): A list of signals indicating buy or sell
    :return List[str]: A list of matpltolib interpretable markers
    """
    colors = []
    for i in range(len(buy_or_sell_signal)):
        if buy_or_sell_signal[i] == 1:
            colors.append("g")
        if buy_or_sell_signal[i] == -1:
            colors.append("r")
    return colors


def calculate_pnl(cash: int, signals: pd.Series, prices: pd.Series,) -> float:
    """
    Function that helps us calculate the PNL generate by the KCA approach
    by investing a specified amount of cash on the first day of the time series
    provided.
    :param cash (int): Amount of cash invested
    :param signals (pd.Series): The signals generated for one futures contract
    :param prices (pd.Series): The price time series for one futures contract
    :return float: The PNL generated
    """
    # Pairing down the 'buy' and 'sell' signals and the multiplying in the price
    sparse = signals * prices
    trades = sparse[sparse != 0]
    t = trades.items()
    returns = []

    # Iterates over the trades that we executed in groups of 2 and calculates the
    # returns of each trade
    for (i, row1), (j, row2) in zip(t, t):
        side = np.sign(row1)
        abs_return = ((abs(row2) - abs(row1)) / abs(row1)) * 100
        returns.append(abs_return * side)
    ratios = (np.array(returns) + 100) / 100
    final_val = np.prod(ratios) * cash
    return final_val - cash
